name: Electron Playwright Tests

on:
  pull_request:
    branches:
      - master

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BRANCH: ${{ github.ref }}
  BUILD_SUFFIX: 'desktop-pr'
  MM_TEST_SERVER_URL: "https://localhost:8065"
  JIRA_PROJECT_KEY: 'MM'
  PULL_REQUEST_BASE_URL: "https://github.com/mattermost/desktop/pull/"
  TEST_CYCLE_LINK_PREFIX: ${{ secrets.TEST_CYCLE_LINK_PREFIX }}
  TYPE: ${{ github.event_name == 'pull_request' && 'PR' || '' }}
  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
  ZEPHYR_API_KEY: ${{ secrets.ZEPHYR_API_KEY }}
  ZEPHYR_ENABLE: 'true'
  ZEPHYR_ENVIRONMENT_NAME: 'Desktop app'
  ZEPHYR_FOLDER_ID: ${{ secrets.ZEPHYR_FOLDER_ID }}

jobs:
  e2e-linux:
    runs-on: ubuntu-latest
    steps:

      - name: ci/checkout-repo
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: ci/setup-node
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version-file: "package.json"
          cache: "npm"
          cache-dependency-path: package-lock.json
      - name: ci/install-dependencies
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 0
        run: |
          wget -qO - https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/xUbuntu_22.04/Release.key | sudo apt-key add -
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.20.1/yq_linux_amd64 && chmod a+x /usr/local/bin/yq
          sudo apt-get update || true && sudo apt-get install -y ca-certificates libxtst-dev libpng++-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu jq icnsutils graphicsmagick tzdata
          npm ci
  
      - name: Set Environment Variables
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
            echo "BUILD_SUFFIX=desktop-pr" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "release" ]; then
            echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV
            echo "BUILD_SUFFIX=desktop-release" >> $GITHUB_ENV
            echo "ZEPHYR_ENABLE=true" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "schedule" ]; then
            echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV
            echo "BUILD_SUFFIX=desktop-nightly" >> $GITHUB_ENV
          fi

          echo "BUILD_ID=${{ github.run_id }}-${BUILD_SUFFIX}-${{ runner.os }}" >> $GITHUB_ENV
          echo "BUILD_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "PULL_REQUEST=${PULL_REQUEST_BASE_URL}${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          if [ -n "${ZEPHYR_ENABLE}" ]; then
            echo "ZEPHYR_ENABLE=${ZEPHYR_ENABLE}" >> $GITHUB_ENV
          fi

      - name: Checkout mattermost
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          repository: mattermost/mattermost
          path: mattermost

      - name: Run mattermsot server & Playwright tests (Ubuntu OS)
        run: |
          cd mattermost/e2e-tests
          echo "SERVER_IMAGE=mattermost/mattermost-enterprise-edition:release-8.0" >.ci/env
          make start-server && make prepare-server
          export DISPLAY=:99
          Xvfb $DISPLAY -screen 0 1024x768x24 > /dev/null 2>&1 &
          npm run test:e2e || true
          npm run test:e2e:send-report

  # e2e-macos:
  #     runs-on: macos-12

  #     steps:
  #       - name: ci/checkout-repo
  #         uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
  #       - name: ci/setup-node
  #         uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
  #         with:
  #           node-version-file: "package.json"
  #           cache: "npm"
  #           cache-dependency-path: package-lock.json

  #       - name: Setup go
  #         uses: actions/setup-go@v2
  #         with:
  #           go-version: '1.20'

  #       - name: ci/install-dependencies
  #         env:
  #           PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 0
  #         run: |
  #           brew install yq
  #           jq '.mac.target=["zip"]' electron-builder.json | jq '.mac.gatekeeperAssess=false' > /tmp/electron-builder.json && cp /tmp/electron-builder.json .
  #           npm ci

  #       - name: Setup Docker on macOS
  #         run: |
  #           brew install docker docker-compose
  #           colima start
  #           mkdir -p ~/.docker/cli-plugins
  #           ln -sfn /usr/local/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose

  #       - name: Checkout mattermost
  #         uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
  #         with:
  #           repository: mattermost/mattermost
  #           path: mattermost

  #       - name: Run mattermsot server 
  #         run: |
  #           cd mattermost/server
  #           make test-data || true
  #           make run-server &

  #       - name: Playwright tests (macOS)  
  #         run : |
  #           bash ./.github/workflows/scripts/wait-for-server.sh
  #           npm run test:e2e || true
  #           # npm run test:e2e:send-report

  # e2e-windows:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-latest]
  #       node-version: [18.x]

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3.5.3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3.7.0
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: 'npm'

  #     - name: Install Docker and Docker Compose
  #       run: |
  #         # choco install docker-cli
  #         # choco install docker-compose
  #         choco install make

  #         # Install Docker
  #         Invoke-WebRequest -Uri https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe -OutFile DockerDesktopInstaller.exe
  #         Start-Process -Wait -FilePath DockerDesktopInstaller.exe -ArgumentList '--quiet'

  #         # Wait for Docker to start (adjust the sleep duration if needed)
  #         Start-Sleep -Seconds 60

  #         # Download Docker Compose
  #         Invoke-WebRequest -Uri https://github.com/docker/compose/releases/latest/download/docker-compose-Windows-x86_64.exe -OutFile docker-compose.exe
          
  #         # Create the 'C:\Program Files\Docker' directory if it doesn't exist
  #         if (!(Test-Path 'C:\Program Files\Docker')) {
  #           New-Item -ItemType Directory -Path 'C:\Program Files\Docker' -Force
  #         }

  #         # Move Docker Compose to 'C:\Program Files\Docker'
  #         Move-Item .\docker-compose.exe 'C:\Program Files\Docker\docker-compose.exe'

  #         # Add Docker Compose to the system path
  #         $env:Path += ';C:\Program Files\Docker'

  #         docker network prune
  #         docker system prune

  #     - name: Checkout mattermost
  #       uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
  #       with:
  #         repository: mattermost/mattermost
  #         path: mattermost

  #     - name: Run mattermsot server
  #       run: |
  #         cd mattermost/e2e-tests
  #         echo "SERVER_IMAGE=mattermost/mattermost-enterprise-edition:release-8.0" >.ci/env
  #         make start-server && make prepare-server

  #     - name: Run Playwright tests (Windows)
  #       run: |
  #         npm run test:e2e || true
  #         # npm run test:e2e:send-report

  #     - name: Upload Mochawesome Report
  #       uses: actions/upload-artifact@v3.1.2
  #       with:
  #         name: mochawesome-report
  #         path: /home/runner/work/desktop/desktop/mochawesome-report/mochawesome.html
